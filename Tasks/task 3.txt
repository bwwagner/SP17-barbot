#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>

#include <MeMCore.h>

#define EPSILON 0.2

MeDCMotor motor_9(9);
MeDCMotor motor_10(10);

void move(int direction, int speed)
{
  int leftSpeed = 0;
  int rightSpeed = 0;
  if (direction == 1) {
    leftSpeed = speed;
    rightSpeed = speed;
  } else if (direction == 2) {
    leftSpeed = -speed;
    rightSpeed = -speed;
  } else if (direction == 3) {
    leftSpeed = -speed;
    rightSpeed = speed;
  } else if (direction == 4) {
    leftSpeed = speed;
    rightSpeed = -speed;
  }
  motor_9.run((9) == M1 ? -(leftSpeed) : (leftSpeed));
  motor_10.run((10) == M1 ? -(rightSpeed) : (rightSpeed));
}

double angle_rad = PI / 180.0;
double angle_deg = 180.0 / PI;
MeLightSensor lightsensor_6(6);
MeBuzzer buzzer;
MeRGBLed rgbled_1(1, 1 == 7 ? 2 : 4);
MeUltrasonicSensor ultrasonic_3(3);


/*double detectSmallestDistance() {
  double smallest = 99999999999;
  double sample;

  move (4, 100);
  for (int i = 0; i < 40; i++) {
    sample = ultrasonic_3.distanceCm();
    if (sample < smallest) {
      smallest = sample;
    }
    _delay(0.07);
  }
  move (4, 0);
  return smallest;
}*/

double detectLargestDistance() {
  double largest = 0;
  double sample = 0;
  sample = ultrasonic_3.distanceCm();
  buzzer.tone(sample * 10, 100);
  move (4, 75);
  for (int i = 0; i < 20; i++) {
    sample = ultrasonic_3.distanceCm();
    buzzer.tone(sample * 10, 100);
    if (sample > largest) {
      largest = sample;
    }
    _delay(0.2);
  }
  move (4, 0);
  return largest;
}

/*void faceSmallestDistance(double targetDistance) {
  double sample = ultrasonic_3.distanceCm();

  move (4, 100);
  while (sample > (targetDistance + EPSILON)) {
    sample = ultrasonic_3.distanceCm();
  }
  move (4, 0);
}*/

void faceLargestDistance(double targetDistance) {
  double sample = ultrasonic_3.distanceCm();
  int iterations = 0;

  
  while (sample < (targetDistance + EPSILON)) {
    move (4, 75);
    _delay(0.15);
    iterations++;
    if (iterations >= 100) {
      targetDistance = detectLargestDistance();
      iterations = 0;
    }
    sample = ultrasonic_3.distanceCm();
  }
  move(3, 75);
  _delay(0.07);

  move (4, 0);
}

void setup() {

}

void loop() {
  //double smallestDistance = detectSmallestDistance();
  double largestDistance = detectLargestDistance();

  //faceSmallestDistance(smallestDistance);
  faceLargestDistance(largestDistance);

  buzzer.tone(282, 500);
  buzzer.tone(92, 500);
  move(1, 100);

  double sample = ultrasonic_3.distanceCm();
  bool loopForward = true;
  while (loopForward) {
    if (ultrasonic_3.distanceCm() > 15) {

      _delay(0.5);

      //buzzer.tone(ultrasonic_3.distanceCm(), 500);
    } else {
      //move(2, 50);
      loopForward = false;
      //move(1, 100);
    }

  }

  move (1, 0);
  _loop();
}

void _delay(float seconds) {
  long endTime = millis() + seconds * 1000;
  while (millis() < endTime)_loop();
}

void _loop() {

}
